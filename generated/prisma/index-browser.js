
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetaAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  metaAccountId: 'metaAccountId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  tokenExpiresAt: 'tokenExpiresAt',
  businessName: 'businessName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdAccountScalarFieldEnum = {
  id: 'id',
  metaAccountId: 'metaAccountId',
  adAccountId: 'adAccountId',
  name: 'name',
  currency: 'currency',
  timezone: 'timezone',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  metaAccountId: 'metaAccountId',
  adAccountId: 'adAccountId',
  campaignId: 'campaignId',
  name: 'name',
  objective: 'objective',
  status: 'status',
  budget: 'budget',
  budgetType: 'budgetType',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clinicId: 'clinicId',
  productId: 'productId'
};

exports.Prisma.CampaignMetricsScalarFieldEnum = {
  id: 'id',
  campaignId: 'campaignId',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  reach: 'reach',
  spend: 'spend',
  conversions: 'conversions',
  costPerResult: 'costPerResult',
  ctr: 'ctr',
  cpc: 'cpc',
  cpm: 'cpm',
  frequency: 'frequency'
};

exports.Prisma.AdSetScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  campaignId: 'campaignId',
  metaAccountId: 'metaAccountId',
  adSetId: 'adSetId',
  name: 'name',
  status: 'status',
  budget: 'budget',
  budgetType: 'budgetType',
  bidStrategy: 'bidStrategy',
  bidAmount: 'bidAmount',
  startDate: 'startDate',
  endDate: 'endDate',
  targeting: 'targeting',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdSetMetricsScalarFieldEnum = {
  id: 'id',
  adSetId: 'adSetId',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  reach: 'reach',
  spend: 'spend',
  conversions: 'conversions',
  costPerResult: 'costPerResult',
  ctr: 'ctr',
  cpc: 'cpc',
  cpm: 'cpm',
  frequency: 'frequency'
};

exports.Prisma.AdScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adSetId: 'adSetId',
  metaAccountId: 'metaAccountId',
  adId: 'adId',
  name: 'name',
  status: 'status',
  headline: 'headline',
  description: 'description',
  creativeType: 'creativeType',
  imageUrl: 'imageUrl',
  videoUrl: 'videoUrl',
  destinationUrl: 'destinationUrl',
  callToAction: 'callToAction',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdMetricsScalarFieldEnum = {
  id: 'id',
  adId: 'adId',
  date: 'date',
  impressions: 'impressions',
  clicks: 'clicks',
  reach: 'reach',
  spend: 'spend',
  conversions: 'conversions',
  costPerResult: 'costPerResult',
  ctr: 'ctr',
  cpc: 'cpc',
  cpm: 'cpm',
  frequency: 'frequency',
  engagements: 'engagements',
  shares: 'shares',
  comments: 'comments',
  saves: 'saves'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  adId: 'adId',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  priority: 'priority',
  category: 'category',
  clinicId: 'clinicId',
  productId: 'productId',
  recurrence: 'recurrence',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdsPlannerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  objective: 'objective',
  budgetType: 'budgetType',
  budgetAmount: 'budgetAmount',
  whatsappNumber: 'whatsappNumber',
  startDate: 'startDate',
  endDate: 'endDate',
  location: 'location',
  minAge: 'minAge',
  maxAge: 'maxAge',
  gender: 'gender',
  detailTargeting: 'detailTargeting',
  videoUrl: 'videoUrl',
  websiteUrl: 'websiteUrl',
  primaryText: 'primaryText',
  headline: 'headline',
  ctaName: 'ctaName',
  ctaText: 'ctaText',
  preFilledMessage: 'preFilledMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlannerItemScalarFieldEnum = {
  id: 'id',
  plannerId: 'plannerId',
  title: 'title',
  description: 'description',
  platform: 'platform',
  format: 'format',
  budget: 'budget',
  startDate: 'startDate',
  endDate: 'endDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SocialMediaAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  platform: 'platform',
  accountName: 'accountName',
  accountId: 'accountId',
  followers: 'followers',
  accessToken: 'accessToken',
  tokenExpiresAt: 'tokenExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlatformMetricsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  date: 'date',
  followers: 'followers',
  following: 'following',
  posts: 'posts',
  impressions: 'impressions',
  reach: 'reach',
  profileViews: 'profileViews',
  websiteClicks: 'websiteClicks',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EngagementMetricsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  date: 'date',
  likes: 'likes',
  comments: 'comments',
  shares: 'shares',
  saves: 'saves',
  clicks: 'clicks',
  engagementRate: 'engagementRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InfluencerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  name: 'name',
  contactInfo: 'contactInfo',
  reach: 'reach',
  engagementRate: 'engagementRate',
  niche: 'niche',
  cost: 'cost',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InfluencerCampaignsScalarFieldEnum = {
  id: 'id',
  influencerId: 'influencerId',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  results: 'results',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClinicScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  address: 'address',
  city: 'city',
  phone: 'phone',
  email: 'email',
  website: 'website',
  description: 'description',
  featured: 'featured',
  logoUrl: 'logoUrl',
  rating: 'rating',
  reviewCount: 'reviewCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  description: 'description',
  price: 'price',
  sku: 'sku',
  imageUrl: 'imageUrl',
  featured: 'featured',
  category: 'category',
  stock: 'stock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IncomeScalarFieldEnum = {
  id: 'id',
  source: 'source',
  amount: 'amount',
  description: 'description',
  date: 'date',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  method: 'method',
  description: 'description',
  transactionId: 'transactionId',
  receiptUrl: 'receiptUrl',
  invoiceId: 'invoiceId',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  invoiceNumber: 'invoiceNumber',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  dueDate: 'dueDate',
  issueDate: 'issueDate',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ROASMetricsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  adSpend: 'adSpend',
  revenue: 'revenue',
  roasValue: 'roasValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversionMetricsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  source: 'source',
  medium: 'medium',
  campaign: 'campaign',
  landingPage: 'landingPage',
  pageViews: 'pageViews',
  uniqueVisitors: 'uniqueVisitors',
  conversions: 'conversions',
  conversionValue: 'conversionValue',
  conversionRate: 'conversionRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  color: 'color',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagsOnCampaignsScalarFieldEnum = {
  tagId: 'tagId',
  campaignId: 'campaignId',
  assignedAt: 'assignedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DELETED: 'DELETED',
  COMPLETED: 'COMPLETED',
  DRAFT: 'DRAFT'
};

exports.BudgetType = exports.$Enums.BudgetType = {
  DAILY: 'DAILY',
  LIFETIME: 'LIFETIME'
};

exports.AdSetStatus = exports.$Enums.AdSetStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DELETED: 'DELETED',
  DRAFT: 'DRAFT'
};

exports.AdStatus = exports.$Enums.AdStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DELETED: 'DELETED',
  DRAFT: 'DRAFT',
  REVIEW: 'REVIEW',
  REJECTED: 'REJECTED'
};

exports.CreativeType = exports.$Enums.CreativeType = {
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  CAROUSEL: 'CAROUSEL',
  COLLECTION: 'COLLECTION',
  STORY: 'STORY',
  REEL: 'REEL'
};

exports.ScheduleStatus = exports.$Enums.ScheduleStatus = {
  SCHEDULED: 'SCHEDULED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.SchedulePriority = exports.$Enums.SchedulePriority = {
  STANDARD: 'STANDARD',
  PRIORITY: 'PRIORITY'
};

exports.ScheduleCategory = exports.$Enums.ScheduleCategory = {
  PRODUCT: 'PRODUCT',
  CLINIC: 'CLINIC',
  OTHER: 'OTHER'
};

exports.RecurrencePattern = exports.$Enums.RecurrencePattern = {
  NONE: 'NONE',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.CampaignObjective = exports.$Enums.CampaignObjective = {
  TRAFFIC: 'TRAFFIC',
  LEADS: 'LEADS',
  ENGAGEMENT: 'ENGAGEMENT',
  BRAND_AWARENESS: 'BRAND_AWARENESS',
  REACH: 'REACH',
  APP_INSTALLS: 'APP_INSTALLS',
  VIDEO_VIEWS: 'VIDEO_VIEWS',
  CONVERSIONS: 'CONVERSIONS',
  CATALOG_SALES: 'CATALOG_SALES',
  STORE_TRAFFIC: 'STORE_TRAFFIC',
  MESSAGES: 'MESSAGES'
};

exports.GenderTarget = exports.$Enums.GenderTarget = {
  ALL: 'ALL',
  MEN: 'MEN',
  WOMEN: 'WOMEN'
};

exports.PlatformType = exports.$Enums.PlatformType = {
  FACEBOOK: 'FACEBOOK',
  INSTAGRAM: 'INSTAGRAM',
  TWITTER: 'TWITTER',
  LINKEDIN: 'LINKEDIN',
  TIKTOK: 'TIKTOK',
  YOUTUBE: 'YOUTUBE',
  PINTEREST: 'PINTEREST',
  SNAPCHAT: 'SNAPCHAT',
  OTHER: 'OTHER'
};

exports.PlannerItemStatus = exports.$Enums.PlannerItemStatus = {
  DRAFT: 'DRAFT',
  PLANNED: 'PLANNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.InfluencerStatus = exports.$Enums.InfluencerStatus = {
  POTENTIAL: 'POTENTIAL',
  CONTACTED: 'CONTACTED',
  ACTIVE: 'ACTIVE',
  PREVIOUS: 'PREVIOUS',
  BLACKLISTED: 'BLACKLISTED'
};

exports.InfluencerCampaignStatus = exports.$Enums.InfluencerCampaignStatus = {
  PLANNED: 'PLANNED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.IncomeCategory = exports.$Enums.IncomeCategory = {
  ADS_REVENUE: 'ADS_REVENUE',
  CLIENT_PAYMENT: 'CLIENT_PAYMENT',
  AFFILIATE: 'AFFILIATE',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CREDIT_CARD: 'CREDIT_CARD',
  PAYPAL: 'PAYPAL',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CRYPTO: 'CRYPTO',
  OTHER: 'OTHER'
};

exports.InvoiceStatus = exports.$Enums.InvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS'
};

exports.Prisma.ModelName = {
  User: 'User',
  MetaAccount: 'MetaAccount',
  AdAccount: 'AdAccount',
  Campaign: 'Campaign',
  CampaignMetrics: 'CampaignMetrics',
  AdSet: 'AdSet',
  AdSetMetrics: 'AdSetMetrics',
  Ad: 'Ad',
  AdMetrics: 'AdMetrics',
  Schedule: 'Schedule',
  AdsPlanner: 'AdsPlanner',
  PlannerItem: 'PlannerItem',
  SocialMediaAccount: 'SocialMediaAccount',
  PlatformMetrics: 'PlatformMetrics',
  EngagementMetrics: 'EngagementMetrics',
  Influencer: 'Influencer',
  InfluencerCampaigns: 'InfluencerCampaigns',
  Clinic: 'Clinic',
  Product: 'Product',
  Income: 'Income',
  Payment: 'Payment',
  Invoice: 'Invoice',
  ROASMetrics: 'ROASMetrics',
  ConversionMetrics: 'ConversionMetrics',
  Tag: 'Tag',
  TagsOnCampaigns: 'TagsOnCampaigns',
  Notification: 'Notification',
  Setting: 'Setting'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
